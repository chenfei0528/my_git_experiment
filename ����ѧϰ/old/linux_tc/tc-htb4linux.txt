     1	HTB(8)                               Linux                              HTB(8)



     2	NAME
     3	       HTB - Hierarchy Token Bucket

     4	SYNOPSIS
     5	       tc  qdisc  ... dev dev ( parent classid | root) [ handle major: ] htb [
     6	       default minor-id ]

     7	       tc class ... dev dev parent major:[minor] [ classid major:minor  ]  htb
     8	       rate rate [ ceil rate ] burst bytes [ cburst bytes ] [ prio priority ]


     9	DESCRIPTION
    10	       HTB is meant as a more understandable and intuitive replacement for the
    11	       CBQ qdisc in Linux. Both CBQ and HTB help you to control the use of the
    12	       outbound  bandwidth on a given link. Both allow you to use one physical
    13	       link to simulate several slower links and to send  different  kinds  of
    14	       traffic  on different simulated links. In both cases, you have to spec-
    15	       ify how to divide the physical link into simulated  links  and  how  to
    16	       decide which simulated link to use for a given packet to be sent.

    17	       Unlike  CBQ,  HTB shapes traffic based on the Token Bucket Filter algo-
    18	       rithm which does not depend on interface characteristics  and  so  does
    19	       not need to know the underlying bandwidth of the outgoing interface.


    20	SHAPING ALGORITHM
    21	       Shaping works as documented in tc-tbf (8).


    22	CLASSIFICATION
    23	       Within  the  one  HRB  instance  many  classes may exist. Each of these
    24	       classes contains another qdisc, by default tc-pfifo(8).

    25	       When enqueueing a packet, HTB starts at the root and uses various meth-
    26	       ods to determine which class should receive the data.

    27	       In the absence of uncommon configuration options, the process is rather
    28	       easy.  At each node we look for an instruction,  and  then  go  to  the
    29	       class  the  instruction  refers  us  to. If the class found is a barren
    30	       leaf-node (without children), we enqueue the packet there. If it is not
    31	       yet  a  leaf  node, we do the whole thing over again starting from that
    32	       node.

    33	       The following actions are performed, in order at each  node  we  visit,
    34	       until one sends us to another node, or terminates the process.

    35	       (i)    Consult filters attached to the class. If sent to a leafnode, we
    36	              are done.  Otherwise, restart.

    37	       (ii)   If none of the above returned with an  instruction,  enqueue  at
    38	              this node.

    39	       This  algorithm makes sure that a packet always ends up somewhere, even
    40	       while you are busy building your configuration.


    41	LINK SHARING ALGORITHM
    42	       FIXME


    43	QDISC
    44	       The root of a HTB qdisc class tree has the following parameters:


    45	       parent major:minor | root
    46	              This  mandatory  parameter  determines  the  place  of  the  HTB
    47	              instance, either at the root of an interface or within an exist-
    48	              ing class.

    49	       handle major:
    50	              Like all other qdiscs, the HTB can be assigned a handle.  Should
    51	              consist  only  of a major number, followed by a colon. Optional,
    52	              but very useful if classes will be generated within this  qdisc.

    53	       default minor-id
    54	              Unclassified  traffic gets sent to the class with this minor-id.


    55	CLASSES
    56	       Classes have a host of parameters to configure their operation.


    57	       parent major:minor
    58	              Place of this class within the hierarchy. If  attached  directly
    59	              to  a  qdisc  and  not  to  another class, minor can be omitted.
    60	              Mandatory.

    61	       classid major:minor
    62	              Like qdiscs, classes can be named.  The  major  number  must  be
    63	              equal  to  the  major  number  of the qdisc to which it belongs.
    64	              Optional, but needed if this class is going to have children.

    65	       prio priority
    66	              In the round-robin process, classes  with  the  lowest  priority
    67	              field are tried for packets first. Mandatory.


    68	       rate rate
    69	              Maximum  rate  this  class  and all its children are guaranteed.
    70	              Mandatory.


    71	       ceil rate
    72	              Maximum rate at which a class can send, if its parent has  band-
    73	              width  to spare.  Defaults to the configured rate, which implies
    74	              no borrowing


    75	       burst bytes
    76	              Amount of bytes that can be burst at ceil speed,  in  excess  of
    77	              the  configured rate.  Should be at least as high as the highest
    78	              burst of all children.


    79	       cburst bytes
    80	              Amount of bytes that can be burst at 'infinite' speed, in  other
    81	              words,  as  fast as the interface can transmit them. For perfect
    82	              evening out, should be equal to  at  most  one  average  packet.
    83	              Should  be  at  least as high as the highest cburst of all chil-
    84	              dren.


    85	NOTES
    86	       Due to Unix timing constraints, the maximum ceil rate is  not  infinite
    87	       and  may in fact be quite low. On Intel, there are 100 timer events per
    88	       second, the maximum rate is that rate at which 'burst' bytes  are  sent
    89	       each  timer  tick.   From  this, the mininum burst size for a specified
    90	       rate can be calculated. For i386, a 10mbit rate requires a 12  kilobyte
    91	       burst as 100*12kb*8 equals 10mbit.


    92	SEE ALSO
    93	       tc(8)

    94	       HTB website: http://luxik.cdi.cz/~devik/qos/htb/

    95	AUTHOR
    96	       Martin  Devera  <devik@cdi.cz>.  This manpage maintained by bert hubert
    97	       <ahu@ds9a.nl>





    98	iproute2                        10 January 2002                         HTB(8)
